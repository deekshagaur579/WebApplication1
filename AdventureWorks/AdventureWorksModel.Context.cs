//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdventureWorks
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AdventureWorks2022Entities1 : DbContext
    {
        public AdventureWorks2022Entities1()
            : base("name=AdventureWorks2022Entities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AWBuildVersion> AWBuildVersions { get; set; }
        public virtual DbSet<DatabaseLog> DatabaseLogs { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeDepartmentHistory> EmployeeDepartmentHistories { get; set; }
        public virtual DbSet<EmployeePayHistory> EmployeePayHistories { get; set; }
        public virtual DbSet<JobCandidate> JobCandidates { get; set; }
        public virtual DbSet<Shift> Shifts { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<AddressType> AddressTypes { get; set; }
        public virtual DbSet<BusinessEntity> BusinessEntities { get; set; }
        public virtual DbSet<BusinessEntityAddress> BusinessEntityAddresses { get; set; }
        public virtual DbSet<BusinessEntityContact> BusinessEntityContacts { get; set; }
        public virtual DbSet<ContactType> ContactTypes { get; set; }
        public virtual DbSet<CountryRegion> CountryRegions { get; set; }
        public virtual DbSet<EmailAddress> EmailAddresses { get; set; }
        public virtual DbSet<Password> Passwords { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<PersonPhone> PersonPhones { get; set; }
        public virtual DbSet<PhoneNumberType> PhoneNumberTypes { get; set; }
        public virtual DbSet<StateProvince> StateProvinces { get; set; }
        public virtual DbSet<BillOfMaterial> BillOfMaterials { get; set; }
        public virtual DbSet<Culture> Cultures { get; set; }
        public virtual DbSet<Illustration> Illustrations { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<ProductCostHistory> ProductCostHistories { get; set; }
        public virtual DbSet<ProductDescription> ProductDescriptions { get; set; }
        public virtual DbSet<ProductInventory> ProductInventories { get; set; }
        public virtual DbSet<ProductListPriceHistory> ProductListPriceHistories { get; set; }
        public virtual DbSet<ProductModel> ProductModels { get; set; }
        public virtual DbSet<ProductModelIllustration> ProductModelIllustrations { get; set; }
        public virtual DbSet<ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultures { get; set; }
        public virtual DbSet<ProductPhoto> ProductPhotoes { get; set; }
        public virtual DbSet<ProductProductPhoto> ProductProductPhotoes { get; set; }
        public virtual DbSet<ProductReview> ProductReviews { get; set; }
        public virtual DbSet<ProductSubcategory> ProductSubcategories { get; set; }
        public virtual DbSet<ScrapReason> ScrapReasons { get; set; }
        public virtual DbSet<TransactionHistory> TransactionHistories { get; set; }
        public virtual DbSet<TransactionHistoryArchive> TransactionHistoryArchives { get; set; }
        public virtual DbSet<UnitMeasure> UnitMeasures { get; set; }
        public virtual DbSet<WorkOrder> WorkOrders { get; set; }
        public virtual DbSet<WorkOrderRouting> WorkOrderRoutings { get; set; }
        public virtual DbSet<ProductVendor> ProductVendors { get; set; }
        public virtual DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }
        public virtual DbSet<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; }
        public virtual DbSet<ShipMethod> ShipMethods { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<CountryRegionCurrency> CountryRegionCurrencies { get; set; }
        public virtual DbSet<CreditCard> CreditCards { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<CurrencyRate> CurrencyRates { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<PersonCreditCard> PersonCreditCards { get; set; }
        public virtual DbSet<SalesOrderDetail> SalesOrderDetails { get; set; }
        public virtual DbSet<SalesOrderHeader> SalesOrderHeaders { get; set; }
        public virtual DbSet<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasons { get; set; }
        public virtual DbSet<SalesPerson> SalesPersons { get; set; }
        public virtual DbSet<SalesPersonQuotaHistory> SalesPersonQuotaHistories { get; set; }
        public virtual DbSet<SalesReason> SalesReasons { get; set; }
        public virtual DbSet<SalesTaxRate> SalesTaxRates { get; set; }
        public virtual DbSet<SalesTerritory> SalesTerritories { get; set; }
        public virtual DbSet<SalesTerritoryHistory> SalesTerritoryHistories { get; set; }
        public virtual DbSet<ShoppingCartItem> ShoppingCartItems { get; set; }
        public virtual DbSet<SpecialOffer> SpecialOffers { get; set; }
        public virtual DbSet<SpecialOfferProduct> SpecialOfferProducts { get; set; }
        public virtual DbSet<Store> Stores { get; set; }
        public virtual DbSet<CaptureOutputLog> CaptureOutputLogs { get; set; }
        public virtual DbSet<Private_Configurations> Private_Configurations { get; set; }
        public virtual DbSet<Private_NewTestClassList> Private_NewTestClassList { get; set; }
        public virtual DbSet<TestResult> TestResults { get; set; }
        public virtual DbSet<ProductDocument> ProductDocuments { get; set; }
        public virtual DbSet<vEmployee> vEmployees { get; set; }
        public virtual DbSet<vEmployeeDepartment> vEmployeeDepartments { get; set; }
        public virtual DbSet<vEmployeeDepartmentHistory> vEmployeeDepartmentHistories { get; set; }
        public virtual DbSet<vJobCandidate> vJobCandidates { get; set; }
        public virtual DbSet<vJobCandidateEducation> vJobCandidateEducations { get; set; }
        public virtual DbSet<vJobCandidateEmployment> vJobCandidateEmployments { get; set; }
        public virtual DbSet<vAdditionalContactInfo> vAdditionalContactInfoes { get; set; }
        public virtual DbSet<vStateProvinceCountryRegion> vStateProvinceCountryRegions { get; set; }
        public virtual DbSet<vProductAndDescription> vProductAndDescriptions { get; set; }
        public virtual DbSet<vProductModelCatalogDescription> vProductModelCatalogDescriptions { get; set; }
        public virtual DbSet<vProductModelInstruction> vProductModelInstructions { get; set; }
        public virtual DbSet<vVendorWithAddress> vVendorWithAddresses { get; set; }
        public virtual DbSet<vVendorWithContact> vVendorWithContacts { get; set; }
        public virtual DbSet<vIndividualCustomer> vIndividualCustomers { get; set; }
        public virtual DbSet<vPersonDemographic> vPersonDemographics { get; set; }
        public virtual DbSet<vSalesPerson> vSalesPersons { get; set; }
        public virtual DbSet<vSalesPersonSalesByFiscalYear> vSalesPersonSalesByFiscalYears { get; set; }
        public virtual DbSet<vStoreWithAddress> vStoreWithAddresses { get; set; }
        public virtual DbSet<vStoreWithContact> vStoreWithContacts { get; set; }
        public virtual DbSet<vStoreWithDemographic> vStoreWithDemographics { get; set; }
        public virtual DbSet<Private_SysTypes> Private_SysTypes { get; set; }
        public virtual DbSet<TestClass> TestClasses { get; set; }
        public virtual DbSet<Test> Tests { get; set; }
    
        [DbFunction("AdventureWorks2022Entities1", "ufnGetContactInformation")]
        public virtual IQueryable<ufnGetContactInformation_Result> ufnGetContactInformation(Nullable<int> personID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufnGetContactInformation_Result>("[AdventureWorks2022Entities1].[ufnGetContactInformation](@PersonID)", personIDParameter);
        }
    
        [DbFunction("AdventureWorks2022Entities1", "F_Num")]
        public virtual IQueryable<F_Num_Result> F_Num(Nullable<int> n)
        {
            var nParameter = n.HasValue ?
                new ObjectParameter("N", n) :
                new ObjectParameter("N", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<F_Num_Result>("[AdventureWorks2022Entities1].[F_Num](@N)", nParameter);
        }
    
        [DbFunction("AdventureWorks2022Entities1", "Private_Bin2Hex")]
        public virtual IQueryable<Private_Bin2Hex_Result> Private_Bin2Hex(byte[] vb)
        {
            var vbParameter = vb != null ?
                new ObjectParameter("vb", vb) :
                new ObjectParameter("vb", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Private_Bin2Hex_Result>("[AdventureWorks2022Entities1].[Private_Bin2Hex](@vb)", vbParameter);
        }
    
        [DbFunction("AdventureWorks2022Entities1", "Private_GetExternalAccessKeyBytes")]
        public virtual IQueryable<Private_GetExternalAccessKeyBytes_Result> Private_GetExternalAccessKeyBytes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Private_GetExternalAccessKeyBytes_Result>("[AdventureWorks2022Entities1].[Private_GetExternalAccessKeyBytes]()");
        }
    
        [DbFunction("AdventureWorks2022Entities1", "Private_GetFullTypeName")]
        public virtual IQueryable<Private_GetFullTypeName_Result> Private_GetFullTypeName(Nullable<int> typeId, Nullable<int> length, Nullable<int> precision, Nullable<int> scale, string collationName)
        {
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(int));
    
            var precisionParameter = precision.HasValue ?
                new ObjectParameter("Precision", precision) :
                new ObjectParameter("Precision", typeof(int));
    
            var scaleParameter = scale.HasValue ?
                new ObjectParameter("Scale", scale) :
                new ObjectParameter("Scale", typeof(int));
    
            var collationNameParameter = collationName != null ?
                new ObjectParameter("CollationName", collationName) :
                new ObjectParameter("CollationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Private_GetFullTypeName_Result>("[AdventureWorks2022Entities1].[Private_GetFullTypeName](@TypeId, @Length, @Precision, @Scale, @CollationName)", typeIdParameter, lengthParameter, precisionParameter, scaleParameter, collationNameParameter);
        }
    
        [DbFunction("AdventureWorks2022Entities1", "Private_GetOriginalTableInfo")]
        public virtual IQueryable<Private_GetOriginalTableInfo_Result> Private_GetOriginalTableInfo(Nullable<int> tableObjectId)
        {
            var tableObjectIdParameter = tableObjectId.HasValue ?
                new ObjectParameter("TableObjectId", tableObjectId) :
                new ObjectParameter("TableObjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Private_GetOriginalTableInfo_Result>("[AdventureWorks2022Entities1].[Private_GetOriginalTableInfo](@TableObjectId)", tableObjectIdParameter);
        }
    
        [DbFunction("AdventureWorks2022Entities1", "Private_ResolveFakeTableNamesForBackwardCompatibility")]
        public virtual IQueryable<Private_ResolveFakeTableNamesForBackwardCompatibility_Result> Private_ResolveFakeTableNamesForBackwardCompatibility(string tableName, string schemaName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var schemaNameParameter = schemaName != null ?
                new ObjectParameter("SchemaName", schemaName) :
                new ObjectParameter("SchemaName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Private_ResolveFakeTableNamesForBackwardCompatibility_Result>("[AdventureWorks2022Entities1].[Private_ResolveFakeTableNamesForBackwardCompatibility](@TableName, @SchemaName)", tableNameParameter, schemaNameParameter);
        }
    
        [DbFunction("AdventureWorks2022Entities1", "Private_ResolveName")]
        public virtual IQueryable<Private_ResolveName_Result> Private_ResolveName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Private_ResolveName_Result>("[AdventureWorks2022Entities1].[Private_ResolveName](@Name)", nameParameter);
        }
    
        [DbFunction("AdventureWorks2022Entities1", "Private_ResolveObjectName")]
        public virtual IQueryable<Private_ResolveObjectName_Result> Private_ResolveObjectName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Private_ResolveObjectName_Result>("[AdventureWorks2022Entities1].[Private_ResolveObjectName](@Name)", nameParameter);
        }
    
        [DbFunction("AdventureWorks2022Entities1", "Private_ResolveSchemaName")]
        public virtual IQueryable<Private_ResolveSchemaName_Result> Private_ResolveSchemaName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Private_ResolveSchemaName_Result>("[AdventureWorks2022Entities1].[Private_ResolveSchemaName](@Name)", nameParameter);
        }
    
        [DbFunction("AdventureWorks2022Entities1", "TestCaseSummary")]
        public virtual IQueryable<TestCaseSummary_Result> TestCaseSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<TestCaseSummary_Result>("[AdventureWorks2022Entities1].[TestCaseSummary]()");
        }
    
        public virtual ObjectResult<uspGetBillOfMaterials_Result> uspGetBillOfMaterials(Nullable<int> startProductID, Nullable<System.DateTime> checkDate)
        {
            var startProductIDParameter = startProductID.HasValue ?
                new ObjectParameter("StartProductID", startProductID) :
                new ObjectParameter("StartProductID", typeof(int));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetBillOfMaterials_Result>("uspGetBillOfMaterials", startProductIDParameter, checkDateParameter);
        }
    
        public virtual ObjectResult<uspGetEmployeeManagers_Result> uspGetEmployeeManagers(Nullable<int> businessEntityID)
        {
            var businessEntityIDParameter = businessEntityID.HasValue ?
                new ObjectParameter("BusinessEntityID", businessEntityID) :
                new ObjectParameter("BusinessEntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetEmployeeManagers_Result>("uspGetEmployeeManagers", businessEntityIDParameter);
        }
    
        public virtual ObjectResult<uspGetManagerEmployees_Result> uspGetManagerEmployees(Nullable<int> businessEntityID)
        {
            var businessEntityIDParameter = businessEntityID.HasValue ?
                new ObjectParameter("BusinessEntityID", businessEntityID) :
                new ObjectParameter("BusinessEntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetManagerEmployees_Result>("uspGetManagerEmployees", businessEntityIDParameter);
        }
    
        public virtual ObjectResult<uspGetWhereUsedProductID_Result> uspGetWhereUsedProductID(Nullable<int> startProductID, Nullable<System.DateTime> checkDate)
        {
            var startProductIDParameter = startProductID.HasValue ?
                new ObjectParameter("StartProductID", startProductID) :
                new ObjectParameter("StartProductID", typeof(int));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetWhereUsedProductID_Result>("uspGetWhereUsedProductID", startProductIDParameter, checkDateParameter);
        }
    
        public virtual int uspLogError(ObjectParameter errorLogID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogError", errorLogID);
        }
    
        public virtual int uspPrintError()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPrintError");
        }
    
        public virtual int uspSearchCandidateResumes(string searchString, Nullable<bool> useInflectional, Nullable<bool> useThesaurus, Nullable<int> language)
        {
            var searchStringParameter = searchString != null ?
                new ObjectParameter("searchString", searchString) :
                new ObjectParameter("searchString", typeof(string));
    
            var useInflectionalParameter = useInflectional.HasValue ?
                new ObjectParameter("useInflectional", useInflectional) :
                new ObjectParameter("useInflectional", typeof(bool));
    
            var useThesaurusParameter = useThesaurus.HasValue ?
                new ObjectParameter("useThesaurus", useThesaurus) :
                new ObjectParameter("useThesaurus", typeof(bool));
    
            var languageParameter = language.HasValue ?
                new ObjectParameter("language", language) :
                new ObjectParameter("language", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSearchCandidateResumes", searchStringParameter, useInflectionalParameter, useThesaurusParameter, languageParameter);
        }
    
        public virtual int uspUpdateEmployeeHireInfo(Nullable<int> businessEntityID, string jobTitle, Nullable<System.DateTime> hireDate, Nullable<System.DateTime> rateChangeDate, Nullable<decimal> rate, Nullable<byte> payFrequency, Nullable<bool> currentFlag)
        {
            var businessEntityIDParameter = businessEntityID.HasValue ?
                new ObjectParameter("BusinessEntityID", businessEntityID) :
                new ObjectParameter("BusinessEntityID", typeof(int));
    
            var jobTitleParameter = jobTitle != null ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(string));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            var rateChangeDateParameter = rateChangeDate.HasValue ?
                new ObjectParameter("RateChangeDate", rateChangeDate) :
                new ObjectParameter("RateChangeDate", typeof(System.DateTime));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var payFrequencyParameter = payFrequency.HasValue ?
                new ObjectParameter("PayFrequency", payFrequency) :
                new ObjectParameter("PayFrequency", typeof(byte));
    
            var currentFlagParameter = currentFlag.HasValue ?
                new ObjectParameter("CurrentFlag", currentFlag) :
                new ObjectParameter("CurrentFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateEmployeeHireInfo", businessEntityIDParameter, jobTitleParameter, hireDateParameter, rateChangeDateParameter, rateParameter, payFrequencyParameter, currentFlagParameter);
        }
    
        public virtual int uspUpdateEmployeeLogin(Nullable<int> businessEntityID, string loginID, string jobTitle, Nullable<System.DateTime> hireDate, Nullable<bool> currentFlag)
        {
            var businessEntityIDParameter = businessEntityID.HasValue ?
                new ObjectParameter("BusinessEntityID", businessEntityID) :
                new ObjectParameter("BusinessEntityID", typeof(int));
    
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var jobTitleParameter = jobTitle != null ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(string));
    
            var hireDateParameter = hireDate.HasValue ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(System.DateTime));
    
            var currentFlagParameter = currentFlag.HasValue ?
                new ObjectParameter("CurrentFlag", currentFlag) :
                new ObjectParameter("CurrentFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateEmployeeLogin", businessEntityIDParameter, loginIDParameter, jobTitleParameter, hireDateParameter, currentFlagParameter);
        }
    
        public virtual int uspUpdateEmployeePersonalInfo(Nullable<int> businessEntityID, string nationalIDNumber, Nullable<System.DateTime> birthDate, string maritalStatus, string gender)
        {
            var businessEntityIDParameter = businessEntityID.HasValue ?
                new ObjectParameter("BusinessEntityID", businessEntityID) :
                new ObjectParameter("BusinessEntityID", typeof(int));
    
            var nationalIDNumberParameter = nationalIDNumber != null ?
                new ObjectParameter("NationalIDNumber", nationalIDNumber) :
                new ObjectParameter("NationalIDNumber", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var maritalStatusParameter = maritalStatus != null ?
                new ObjectParameter("MaritalStatus", maritalStatus) :
                new ObjectParameter("MaritalStatus", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateEmployeePersonalInfo", businessEntityIDParameter, nationalIDNumberParameter, birthDateParameter, maritalStatusParameter, genderParameter);
        }
    
        public virtual int AssertEquals(string message)
        {
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssertEquals", messageParameter);
        }
    
        public virtual int DropClass(string className)
        {
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DropClass", classNameParameter);
        }
    
        public virtual int EnableExternalAccess(Nullable<bool> @try, Nullable<bool> enable)
        {
            var tryParameter = @try.HasValue ?
                new ObjectParameter("try", @try) :
                new ObjectParameter("try", typeof(bool));
    
            var enableParameter = enable.HasValue ?
                new ObjectParameter("enable", enable) :
                new ObjectParameter("enable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EnableExternalAccess", tryParameter, enableParameter);
        }
    
        public virtual int Fail(string message0, string message1, string message2, string message3, string message4, string message5, string message6, string message7, string message8, string message9)
        {
            var message0Parameter = message0 != null ?
                new ObjectParameter("Message0", message0) :
                new ObjectParameter("Message0", typeof(string));
    
            var message1Parameter = message1 != null ?
                new ObjectParameter("Message1", message1) :
                new ObjectParameter("Message1", typeof(string));
    
            var message2Parameter = message2 != null ?
                new ObjectParameter("Message2", message2) :
                new ObjectParameter("Message2", typeof(string));
    
            var message3Parameter = message3 != null ?
                new ObjectParameter("Message3", message3) :
                new ObjectParameter("Message3", typeof(string));
    
            var message4Parameter = message4 != null ?
                new ObjectParameter("Message4", message4) :
                new ObjectParameter("Message4", typeof(string));
    
            var message5Parameter = message5 != null ?
                new ObjectParameter("Message5", message5) :
                new ObjectParameter("Message5", typeof(string));
    
            var message6Parameter = message6 != null ?
                new ObjectParameter("Message6", message6) :
                new ObjectParameter("Message6", typeof(string));
    
            var message7Parameter = message7 != null ?
                new ObjectParameter("Message7", message7) :
                new ObjectParameter("Message7", typeof(string));
    
            var message8Parameter = message8 != null ?
                new ObjectParameter("Message8", message8) :
                new ObjectParameter("Message8", typeof(string));
    
            var message9Parameter = message9 != null ?
                new ObjectParameter("Message9", message9) :
                new ObjectParameter("Message9", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Fail", message0Parameter, message1Parameter, message2Parameter, message3Parameter, message4Parameter, message5Parameter, message6Parameter, message7Parameter, message8Parameter, message9Parameter);
        }
    
        public virtual int GetNewTranName(ObjectParameter tranName)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNewTranName", tranName);
        }
    
        public virtual int InstallExternalAccessKey()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InstallExternalAccessKey");
        }
    
        public virtual int LogCapturedOutput(string text)
        {
            var textParameter = text != null ?
                new ObjectParameter("text", text) :
                new ObjectParameter("text", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LogCapturedOutput", textParameter);
        }
    
        public virtual int NewTestClass(string className)
        {
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewTestClass", classNameParameter);
        }
    
        public virtual int Private_DisallowOverwritingNonTestSchema(string className)
        {
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_DisallowOverwritingNonTestSchema", classNameParameter);
        }
    
        public virtual int Private_MarkSchemaAsTestClass(string quotedClassName)
        {
            var quotedClassNameParameter = quotedClassName != null ?
                new ObjectParameter("QuotedClassName", quotedClassName) :
                new ObjectParameter("QuotedClassName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_MarkSchemaAsTestClass", quotedClassNameParameter);
        }
    
        public virtual int Private_OutputTestResults(string testResultFormatter)
        {
            var testResultFormatterParameter = testResultFormatter != null ?
                new ObjectParameter("TestResultFormatter", testResultFormatter) :
                new ObjectParameter("TestResultFormatter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_OutputTestResults", testResultFormatterParameter);
        }
    
        public virtual int Private_Print(string message, Nullable<int> severity)
        {
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var severityParameter = severity.HasValue ?
                new ObjectParameter("Severity", severity) :
                new ObjectParameter("Severity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_Print", messageParameter, severityParameter);
        }
    
        public virtual ObjectResult<string> Private_PrintXML(string message)
        {
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Private_PrintXML", messageParameter);
        }
    
        public virtual int Private_ResetNewTestClassList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_ResetNewTestClassList");
        }
    
        public virtual int Private_SaveTestNameForSession(string testName)
        {
            var testNameParameter = testName != null ?
                new ObjectParameter("TestName", testName) :
                new ObjectParameter("TestName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_SaveTestNameForSession", testNameParameter);
        }
    
        public virtual int Private_SetConfiguration(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_SetConfiguration", nameParameter);
        }
    
        public virtual int Private_SetFakeViewOff_SingleView(string viewName)
        {
            var viewNameParameter = viewName != null ?
                new ObjectParameter("ViewName", viewName) :
                new ObjectParameter("ViewName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_SetFakeViewOff_SingleView", viewNameParameter);
        }
    
        public virtual int Private_SetFakeViewOn_SingleView(string viewName)
        {
            var viewNameParameter = viewName != null ?
                new ObjectParameter("ViewName", viewName) :
                new ObjectParameter("ViewName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_SetFakeViewOn_SingleView", viewNameParameter);
        }
    
        public virtual int Private_ValidateProcedureCanBeUsedWithSpyProcedure(string procedureName)
        {
            var procedureNameParameter = procedureName != null ?
                new ObjectParameter("ProcedureName", procedureName) :
                new ObjectParameter("ProcedureName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Private_ValidateProcedureCanBeUsedWithSpyProcedure", procedureNameParameter);
        }
    
        public virtual int RemoveExternalAccessKey()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveExternalAccessKey");
        }
    
        public virtual int SetFakeViewOff(string schemaName)
        {
            var schemaNameParameter = schemaName != null ?
                new ObjectParameter("SchemaName", schemaName) :
                new ObjectParameter("SchemaName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetFakeViewOff", schemaNameParameter);
        }
    
        public virtual int SetFakeViewOn(string schemaName)
        {
            var schemaNameParameter = schemaName != null ?
                new ObjectParameter("SchemaName", schemaName) :
                new ObjectParameter("SchemaName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetFakeViewOn", schemaNameParameter);
        }
    
        public virtual int SetTestResultFormatter(string formatter)
        {
            var formatterParameter = formatter != null ?
                new ObjectParameter("Formatter", formatter) :
                new ObjectParameter("Formatter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetTestResultFormatter", formatterParameter);
        }
    
        public virtual int SetVerbose(Nullable<bool> verbose)
        {
            var verboseParameter = verbose.HasValue ?
                new ObjectParameter("Verbose", verbose) :
                new ObjectParameter("Verbose", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetVerbose", verboseParameter);
        }
    
        public virtual int Uninstall()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Uninstall");
        }
    }
}
